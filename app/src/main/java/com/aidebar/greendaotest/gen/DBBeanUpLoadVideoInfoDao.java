package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.china.snapshot.bean.DBBeanUpLoadVideoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBBEAN_UP_LOAD_VIDEO_INFO".
*/
public class DBBeanUpLoadVideoInfoDao extends AbstractDao<DBBeanUpLoadVideoInfo, Long> {

    public static final String TABLENAME = "DBBEAN_UP_LOAD_VIDEO_INFO";

    /**
     * Properties of entity DBBeanUpLoadVideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CreatTimeAsId = new Property(0, long.class, "creatTimeAsId", true, "_id");
        public final static Property LocationDesc = new Property(1, String.class, "locationDesc", false, "DBBeanUpLoadVideoInfo");
        public final static Property BitmapPath = new Property(2, String.class, "bitmapPath", false, "BITMAP_PATH");
        public final static Property MediaLocalPath = new Property(3, String.class, "mediaLocalPath", false, "MEDIA_LOCAL_PATH");
    }


    public DBBeanUpLoadVideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DBBeanUpLoadVideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBBEAN_UP_LOAD_VIDEO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: creatTimeAsId
                "\"DBBeanUpLoadVideoInfo\" TEXT," + // 1: locationDesc
                "\"BITMAP_PATH\" TEXT," + // 2: bitmapPath
                "\"MEDIA_LOCAL_PATH\" TEXT);"); // 3: mediaLocalPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBBEAN_UP_LOAD_VIDEO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBBeanUpLoadVideoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTimeAsId());
 
        String locationDesc = entity.getLocationDesc();
        if (locationDesc != null) {
            stmt.bindString(2, locationDesc);
        }
 
        String bitmapPath = entity.getBitmapPath();
        if (bitmapPath != null) {
            stmt.bindString(3, bitmapPath);
        }
 
        String mediaLocalPath = entity.getMediaLocalPath();
        if (mediaLocalPath != null) {
            stmt.bindString(4, mediaLocalPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBBeanUpLoadVideoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTimeAsId());
 
        String locationDesc = entity.getLocationDesc();
        if (locationDesc != null) {
            stmt.bindString(2, locationDesc);
        }
 
        String bitmapPath = entity.getBitmapPath();
        if (bitmapPath != null) {
            stmt.bindString(3, bitmapPath);
        }
 
        String mediaLocalPath = entity.getMediaLocalPath();
        if (mediaLocalPath != null) {
            stmt.bindString(4, mediaLocalPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DBBeanUpLoadVideoInfo readEntity(Cursor cursor, int offset) {
        DBBeanUpLoadVideoInfo entity = new DBBeanUpLoadVideoInfo( //
            cursor.getLong(offset + 0), // creatTimeAsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // locationDesc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bitmapPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // mediaLocalPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBBeanUpLoadVideoInfo entity, int offset) {
        entity.setCreatTimeAsId(cursor.getLong(offset + 0));
        entity.setLocationDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBitmapPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMediaLocalPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBBeanUpLoadVideoInfo entity, long rowId) {
        entity.setCreatTimeAsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBBeanUpLoadVideoInfo entity) {
        if(entity != null) {
            return entity.getCreatTimeAsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBBeanUpLoadVideoInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
