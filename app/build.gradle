apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    useLibrary 'org.apache.http.legacy'
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    defaultConfig {
        applicationId "com.china.snapshot"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode new Date().format("yyMMddHHmm").toInteger()
        versionName "1.1"
        flavorDimensions "versionCode"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/resources']
            aidl.srcDirs = ['src/main/aidl']
            renderscript.srcDirs = ['src/maom']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDir 'src/main/jniLibs'
        }

        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {
        kuan {
            dimension "default"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "kuan"]
        }
        xiaomi {
            dimension "default"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
        }
        qh360 {
            dimension "default"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "qh360"]
        }
        baidu {
            dimension "default"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
        }
        wandoujia {
            dimension "default"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
        Yyb {
            dimension "default"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "Yyb"]
        }

        GooglePlay {
            dimension "default"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "GooglePlay"]
        }

    }


    dataBinding {
        enabled = true
    }
}
//greenDao----start//
apply plugin: 'org.greenrobot.greendao'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.0'
    }
}
greendao {
    schemaVersion 3 //<--数据库的版本，用于升级时候进行更改
    daoPackage 'com.aidebar.greendaotest.gen'     //存放自动生成代码的包
    targetGenDir 'src/main/java'                  //...
}
//greenDao----end//

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.1.0'
            }
        }
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //以下SDK开发者请根据需要自行选择  bmob-sdk  Start
    //bmob-sdk：Bmob的android sdk包，包含了Bmob的数据存储、文件等服务，以下是最新的bmob-sdk:
    //3.5.5：请务必查看下面注释[1]

    //bmob-push：Bmob的推送包

    //bmob-im：Bmob的即时通讯包，注意每个版本的im依赖特定版本的bmob-sdk，具体的依赖关系可查看下面注释[2]

    //bmob-sms ：Bmob单独为短信服务提供的包

    //如果你想应用能够兼容Android6.0，请添加此依赖(org.apache.http.legacy.jar)

    //以下SDK开发者请根据需要自行选择  bmob-sdk  end

    //没有使用特殊Header，可以不加这行
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:recyclerview-v7:26.1.0'
    compile 'com.android.support:design:26.1.0'
    compile 'com.android.support:cardview-v7:26.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.1.3'
    compile 'org.greenrobot:greendao:3.2.0'
    compile 'org.greenrobot:greendao-generator:3.2.0'
    compile 'com.danikula:videocache:2.7.0'
    compile 'com.jakewharton:butterknife:8.7.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:1.5.0@aar'
    compile 'cn.bmob.android:bmob-sdk:3.5.5'
    compile 'org.greenrobot:eventbus:3.1.1'
    compile 'cn.bmob.android:http-legacy:1.0'
    compile 'com.blankj:utilcode:1.14.3'
    compile 'com.googlecode.mp4parser:isoparser:1.1.18'
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'
    compile 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.3'
    testCompile 'junit:junit:4.12'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
}
